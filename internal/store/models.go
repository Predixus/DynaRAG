// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package store

import (
	"database/sql/driver"
	"fmt"

	"github.com/Predixus/DynaRAG/types"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

type EmbeddingModel string

const (
	EmbeddingModelAllMiniLML6V2             EmbeddingModel = "all-MiniLM-L6-v2"
	EmbeddingModelAllMpnetBaseV2            EmbeddingModel = "all-mpnet-base-v2"
	EmbeddingModelMultiCAUTIONMiniLML6CosV1 EmbeddingModel = "multi-CAUTION-MiniLM-L6-cos-v1"
)

func (e *EmbeddingModel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EmbeddingModel(s)
	case string:
		*e = EmbeddingModel(s)
	default:
		return fmt.Errorf("unsupported scan type for EmbeddingModel: %T", src)
	}
	return nil
}

type NullEmbeddingModel struct {
	EmbeddingModel EmbeddingModel
	Valid          bool // Valid is true if EmbeddingModel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEmbeddingModel) Scan(value interface{}) error {
	if value == nil {
		ns.EmbeddingModel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EmbeddingModel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEmbeddingModel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EmbeddingModel), nil
}

type Document struct {
	ID             int64
	FilePath       string
	TotalChunkSize pgtype.Int8
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

type Embedding struct {
	ID            int64
	DocumentID    pgtype.Int8
	ModelName     EmbeddingModel
	Embedding     pgvector.Vector
	ChunkText     string
	ChunkSize     int32
	CreatedAt     pgtype.Timestamptz
	Metadata      types.JSONMap
	MetadataHash  pgtype.Text
	EmbeddingText pgtype.Text
}
